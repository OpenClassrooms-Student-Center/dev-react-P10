// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects     Project[]       @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  createdTasks      Task[]          @relation("TaskCreator")
  assignedTasks     TaskAssignee[]  @relation("TaskAssignee")
  comments          Comment[]       @relation("CommentAuthor")

  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User             @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      String   @default("CONTRIBUTOR") // ADMIN ou CONTRIBUTOR
  joinedAt  DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("TODO") // TODO, IN_PROGRESS, DONE, CANCELLED
  priority    String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   String
  creator     User    @relation("TaskCreator", fields: [creatorId], references: [id])
  assignees   TaskAssignee[]
  comments    Comment[]

  @@map("tasks")
}

model TaskAssignee {
  id         String   @id @default(cuid())
  assignedAt DateTime @default(now())

  // Relations
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation("TaskAssignee", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}
